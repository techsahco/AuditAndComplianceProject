@model adminlte.ViewModels.DepartmentUserRequestViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var selectedDepartment = ViewBag.selectedDepartment;
}

<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            DEPARTMENT USER
            <small>Edit user</small>
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-dashboard"></i> Department user</a></li>
            <li><a href="#">Edit</a></li>
            <li class="active">Edit</li>
        </ol>
    </section>
    <!-- Main content -->
    <section class="content">
        <div class="row">
            <div class="col-xs-12">
                <div class="box">
                    <!-- /.box-header -->
                    <div class="box-header">
                        <div class="col-lg-10">

                        </div>
                        <div class="col-lg-2">

                        </div>

                        @* <div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-plus" onclick="redirectToAddPage"></i> New Department</div>*@
                    </div>
                    <div class="box-body">
                        <input type="hidden" value="@selectedDepartment" id="hdnDepID" />

                        @using (Html.BeginForm("Edit", "DepartmentsUser", FormMethod.Post, new { id = "editForm" }))
                        {
                            @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <div class="form-group ">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = "Email", @disabled = true , id="txtEmail"})

                                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DepartmentID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.DepartmentID, new List<SelectListItem> { new SelectListItem { Text = "Select a Department", Value = "-1" } },
                                new { @class = "form-control", id = "DepartmentDropdown", @disabled = true })
                                @Html.ValidationMessageFor(model => model.DepartmentID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group ">
                            @Html.Label("Old Password", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.PasswordFor(model => model.OldPassword, new { @class = "form-control", placeholder = "Old Password", id = "oldPass" })
                            </div>
                            <div class="col-md-2">
                                <input type="button" onclick="VerifyPasword('@Model.Email')" class="btn btn-success pull-right" value="Verify Password" />
                            </div>
                        </div>
                        <div class="form-group ">
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Password",@disabled = true,id="txtpass" })

                                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Retype password",@disabled=true,id = "txtoldpass" })

                                @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-8">
                                <input type="submit" class="btn btn-primary pull-right" value="Update Password" />
                            </div>
                        </div>

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    </div>
                        }

                    </div>
                </div>
            </div>
        </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {
            getDepartments();
        });
        function getDepartments() {
            $.ajax({
                type: 'GET',
                url: '/Departments/GetDepartments',
                success: function (response) {
                    toastr.success("Dependencies loaded Succesfully");
                    var options = '';
                    //options += '<option value="-1">Select Department</option>';
                    for (var i = 0; i < response.data.length; i++) {
                        options += '<option value="' + response.data[i].DepartmentID + '">' + response.data[i].DepartmentName + '</option>';
                    }
                    $('#DepartmentDropdown').append(options);
                    $('#DepartmentDropdown').val($('#hdnDepID').val());
                },
                error: function (xhr, status, error) {

                    toastr.error("Dependencies couldn't be loaded");
                }
            });
        }
        function VerifyPasword(email) {
            var oldPass = $('#oldPass').val();
            if (oldPass == "") {
                toastr.error("Please provide old password")
            }
            else {
                $.ajax({
                    type: 'GET',
                    url: '/DepartmentsUser/VerifyPassword',
                    data: { "email": email, "oldpassword": oldPass },
                    success: function (response) {
                        toastr.success("You can now update password");
                        $("#txtpass").prop("disabled",false)
                        $("#txtoldpass").prop("disabled",false)
                    },
                    error: function (xhr, status, error) {

                        toastr.error("Dependencies couldn't be loaded");
                    }
                });
            }
        }
        $('#editForm').submit(function () {
            // Enable the disabled fields
            $("#txtpass").prop("disabled", false);
            $("#txtoldpass").prop("disabled", false);
            $("#txtEmail").prop("disabled", false);
            $("#DepartmentDropdown").prop("disabled", false);
        });
        </script>
}
